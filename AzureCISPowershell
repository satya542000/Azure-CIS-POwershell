$global:exportArray = New-Object System.Collections.ArrayList


function IAM1.23 {
    try {
        $effectedResources = @()
        $OwnerRoleList = Get-AzRoleDefinition | Where-Object { ($_.IsCustom -eq $true) -and ($_.Name -like "Owner") }
        if ($OwnerRoleList.Count -gt 0) {
            foreach ($role in $OwnerRoleList) {
                $effectedResources += ($OwnerRoleList.Name + ":" + $OwnerRoleList.Id)
            }
        }
        $desc = "Subscription ownership should not include permission to create custom owner roles."
        $rem = "Ensure That No Custom Subscription Owner Roles Are Created"
        AddToExportArray -type "IAM1.23" -cisid "1.23" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}
#============================================================================================================================
function Storage3.1 {
    try {
        $effectedResources = @()
    $sa=Get-AzStorageAccount
    foreach($name in $sa){
    $m = Write-Output $name.ResourceGroupName
    $n = Write-Output $name.StorageAccountName
    $az = Get-AzStorageAccount -ResourceGroupName $m -Name $n 
    if($az.EnableHttpsTrafficOnly -eq $false){
        $effectedResources += ($n)
    }
}
    
        $desc = "Enable data encryption in transit."
        $rem = "Ensure that Secure transfer required is set to Enabled."
        AddToExportArray -type "Storage_account 3" -cisid "3.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#============================================================================================================================


function Storage3.5 {
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount
        foreach($name in $sa ){
            $m = Write-Output $name.ResourceGroupName
            $n = Write-Output $name.StorageAccountName
            $key1 = (Get-AzStorageAccountKey -ResourceGroupName $m -Name $n).value
            $storagecontext = New-azstoragecontext -storageaccountname $n -StorageAccountKey $key1.getvalue(0)
            $az = Get-AzStorageServiceLoggingProperty -ServiceType 'Queue' -Context $storagecontext
            if($az.LoggingOperations -eq 'None'){
                $effectedResources  += $n
            }
        }
        $desc = "Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis."
        $rem = " Ensure Storage Logging is Enabled for Queue Service for Read', 'Write', and 'Delete' Requests. "
        AddToExportArray -type "Storage_account 3" -cisid "3.5" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}


#============================================================================================================================



function Storage3.7{
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount
        foreach($name in $sa ){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $az = Get-AzStorageAccount -ResourceGroupName $m -Name $n
        if($az.AllowBlobPublicAccess -eq $true){
         $effectedResources  += ($n)
        }
        }
        $desc = "Disallowing public access for a storage account overrides the public access settings for individual containers in that storage account."
        $rem  = "Ensure that Public access level is disabled for storage accounts with blob containers."
        AddToExportArray -type "Storage_account 3" -cisid "3.7" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#============================================================================================================================

function Storage3.8 {
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount
        foreach($name in $sa ){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $az = Get-AzStorageAccountNetworkRuleset -ResourceGroupName $m -Name $n
        if($az.DefaultAction -eq "Allow"){
            $effectedResources += ($n)
        }
        }
        $desc = "Restricting default network access helps to provide a new layer of security, since storage accounts accept connections from clients on any network. To limit access to  selected networks, the default action must be changed."
        $rem  = " Ensure Default Network Access Rule for Storage Accounts is Set to Deny "
        AddToExportArray -type "Storage_account 3" -cisid "3.8" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#============================================================================================================================




function Storage3.9 {
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount
        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $az = Get-AzStorageAccountNetworkRuleset -ResourceGroupName $m -Name $n
        if($az.Bypass -eq $false){
            $effectedResources += ($n)
        }
        }
        $desc = "Turning on firewall rules for storage account will block access to incoming requests for data, including from other Azure services. We can re-enable this functionality by enabling Trusted Azure Services through networking exceptions."
        $rem  = "Ensure Allow Azure services on the trusted services list to access this storage account is Enabled for Storage Account Access"
        AddToExportArray -type "Storage_account 3" -cisid "3.9" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}



#============================================================================================================================

function Storage3.11{
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount
        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $az = Get-AzStorageBlobServiceProperty  -ResourceGroupName $m -Name $n
        if($az.DeleteRetentionPolicy.Enabled -eq $false){
            $effectedResources += ($n)
        }
        }
        $desc = "The Azure Storage blobs contain data like ePHI or Financial, which can be secret or  personal. Data that is erroneously modified or deleted by an application or other storage  account user will cause data loss or unavailability. It is recommended that both Azure Containers with attached Blob Storage and  standalone containers with Blob Storage be made recoverable by enabling the soft delete configuration."
        $rem  = "Ensure Soft Delete is Enabled for Azure Containers and Blob Storage"
        AddToExportArray -type "Storage_account 3" -cisid "3.11" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}


#============================================================================================================================
function Storage3.13{
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount

        foreach($name in $sa ){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $key1 = (Get-AzStorageAccountKey -ResourceGroupName $m -Name $n).value
        $storagecontext = New-azstoragecontext -storageaccountname $n -StorageAccountKey $key1.getvalue(0)
        $az = Get-AzStorageServiceLoggingProperty -ServiceType 'Blob' -Context $storagecontext
        if($az.LoggingOperations  -eq "None"){
        $effectedResources += ($n)
        }
        }
        $desc = "The Storage Blob service provides scalable, cost-efficient object storage in the cloud. Storage Logging happens server-side and allows details for both successful and failed  requests to be recorded in the storage account. These logs allow users to see the  details of read, write, and delete operations against the blobs. Storage Logging log  entries contain the following information about individual requests: timing information such as start time, end-to-end latency, and server latency; authentication details; concurrency information; and the sizes of the request and response messages."
        $rem  = "Ensure Storage logging is Enabled for Blob Service for 'Read', 'Write', and 'Delete' requests "
        AddToExportArray -type "Storage_account 3" -cisid "3.13" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}



#============================================================================================================================

function Storage3.14{
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount

        foreach($name in $sa ){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $key1 = (Get-AzStorageAccountKey -ResourceGroupName $m -Name $n).value
        $storagecontext = New-azstoragecontext -storageaccountname $n -StorageAccountKey $key1.getvalue(0)
        $az = Get-AzStorageServiceLoggingProperty -ServiceType 'Table' -Context $storagecontext
        if($az.LoggingOperations  -eq "None"){
            $effectedResources += ($n)
        }
        }
        $desc = "Storage Analytics logs contain detailed information about successful and failed requests to a storage service. This information can be used to monitor each individual request to a storage service for increased security or diagnostics. Requests are logged on a best effort basis."
        $rem = " Ensure Storage Logging is Enabled for Table Service for Read', 'Write', and 'Delete' Requests "
        AddToExportArray -type "Storage_account 3" -cisid "3.14" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}


#============================================================================================================================


function Storage3.15{
    try {
        $effectedResources = @()

        $sa=Get-AzStorageAccount
        foreach($name in $sa ){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $az = (Get-AzStorageAccount -Name $n -ResourceGroupName $m ).MinimumTlsVersion
        if($az -ne 'TLS1_2'){
            $effectedResources += ($n)
        }
        } 
       
        $desc = "In some cases, Azure Storage sets the minimum TLS version to be version 1.0 by default. TLS 1.0 is a legacy version and has known vulnerabilities. This minimum TLS version can be configured to be later protocols such as TLS 1.2."
        $rem = "Ensure the Minimum TLS version for storage accounts is set to Version 1.2 "

        AddToExportArray -type "Storage_account 3" -cisid "3.15" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
        
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}
#========================================================================================================
function SQL4_1_1 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerAuditingSettings = Get-AzSqlServerAudit -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($SQLServerAuditingSettings.BlobStorageTargetState -ne "enabled" -and $SQLServerAuditingSettings.EventHubTargetState -ne "enabled" -and $SQLServerList.LogAnalyticsTargetState -ne "enabled") {
                $effectedResources += $SQLServerAuditingSettings.ServerName
            }
        }
        $desc = "Enable auditing on SQL Servers."
        $rem = "Ensure that 'Auditing' is set to 'On'"
        AddToExportArray -type "SQLServerAuditingSettings" -cisid "4.1.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_1_2 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerFirewallRules = Get-AzSqlServerFirewallRule -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($SQLServerFirewallRules.StartIpAddress -eq "0.0.0.0/0" -or $SQLServerFirewallRules.FirewallRuleName -eq "AllowAllWindowsAzureIps") {
                $effectedResources += $SQLServerFirewallRules.ServerName
            }
        }
        $desc = "Ensure that no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)."
        $rem = "Ensure no Azure SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)"
        AddToExportArray -type "SQLServerFirewallRules" -cisid "4.1.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_1_3 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLTDEProtector = Get-AzSqlServerTransparentDataEncryptionProtector -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($SQLTDEProtector.Type -ne 'AzureKeyVault' -and $null -eq $SQLTDEProtector.KeyId) {
                $effectedResources += $SQLTDEProtector.ServerName
            }
        }
        $desc = "Transparent Data Encryption (TDE) with Customer-managed key support provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties."
        $rem = "Ensure SQL server's Transparent Data Encryption (TDE) protector is encrypted with Customer-managed key"
        AddToExportArray -type "SQLTDEProtector" -cisid "4.1.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_1_4 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServer_AD_Admin_info = Get-AzSqlServerActiveDirectoryAdministrator -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($null -eq $SQLServer_AD_Admin_info.DisplayName) {
                $effectedResources += $name.ServerName
            }
        }
        $desc = "Use Azure Active Directory Authentication for authentication with SQL Database to manage credentials in a single place."
        $rem = "Ensure that Azure Active Directory Admin is Configured for SQL Servers"
        AddToExportArray -type "SQLServer_AD_Admin_info" -cisid "4.1.4" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_1_5 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerDatabasesList = Get-AzSqlDatabase -ServerName $name.Servername -ResourceGroupName $name.ResourceGroupName
            foreach ($name in $SQLServerDatabasesList) {
                $SQLServerTDEstate = Get-AzSqlDatabaseTransparentDataEncryption  -ServerName $name.Servername -ResourceGroupName $name.ResourceGroupName -DatabaseName $name.DatabaseName
                if ($SQLServerTDEstate.DatabaseName -ne 'master' -and $SQLServerTDEstate.State -ne 'Enabled') {
                    $effectedResources += $SQLServerTDEstate.DatabaseName
                }
            }
        }
        $desc = "Enable Transparent Data Encryption on every SQL server."
        $rem = "Ensure that 'Data encryption' is set to 'On' on a SQL Database"
        AddToExportArray -type "SQLServerTDEstate" -cisid "4.1.5" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_1_6 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerAuditingSettings = Get-AzSqlServerAudit -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($SQLServerAuditingSettings.LogAnalyticsTargetState -eq 'Enabled') {
                $SQLServerWorkspaceInfo = Get-AzOperationalInsightsWorkspace | Where-Object { $_.ResourceId -eq 'SQL Server WorkSpaceResourceId' }
                if ($SQLServerWorkspaceInfo.RetentionInDays -lt 90) {
                    $effectedResources += $SQLServerWorkspaceInfo.ServerName
                }
            }
            else {
                if ($SQLServerAuditingSettings.RetentionInDays -lt 90) {
                    $effectedResources += $SQLServerAuditingSettings.ServerName
                }
            }
        }
        $desc = "SQL Server Audit Retention should be configured to be greater than 90 days."
        $rem = "Ensure that 'Auditing' Retention is 'greater than 90 days'"
        AddToExportArray -type "SQLServerWorkspaceInfo" -cisid "4.1.6" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_2_1 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerThreatProtectionSettings = Get-AzSqlServerAdvancedThreatProtectionSetting -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            foreach ($name in $SQLServerThreatProtectionSettings) {
                if ($SQLServerThreatProtectionSettings.ThreatDetectionState -ne "enabled") {
                    $effectedResources += $SQLServerThreatProtectionSettings.ServerName
                }
            }
        }
        $desc = "Enable 'Microsoft Defender for SQL' on critical SQL Servers."
        $rem = "Ensure that Microsoft Defender for SQL is set to 'On' for critical SQL Servers"
        AddToExportArray -type "SQLServerThreatProtectionSettings" -cisid "4.2.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_2_2 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerVulnerabilityAssessmentSettings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($null -eq $SQLServerVulnerabilityAssessmentSettings.StorageAccountName) {
                $effectedResources += $SQLServerVulnerabilityAssessmentSettings.ServerName
            }
        }
        $desc = "Enable Vulnerability Assessment (VA) service scans for critical SQL servers and corresponding SQL databases."
        $rem = "Ensure that Vulnerability Assessment (VA) is enabled on a SQL server by setting a Storage Account"
        AddToExportArray -type "SQLServerVulnerabilityAssessmentSettings" -cisid "4.2.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}

#========================================================================================================
function SQL4_2_3 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerVulnerabilityAssessmentSettings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($SQLServerVulnerabilityAssessmentSettings.RecurringScansInterval -eq 'None') {
                $effectedResources += $SQLServerVulnerabilityAssessmentSettings.ServerName
            }
        }
        $desc = "Enable Vulnerability Assessment (VA) Periodic recurring scans for critical SQL servers and corresponding SQL databases."
        $rem = "Ensure that Vulnerability Assessment (VA) setting 'Periodic recurring scans' is set to 'on' for each SQL server"
        AddToExportArray -type "SQLServerVulnerabilityAssessmentSettings" -cisid "4.2.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_2_4 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerVulnerabilityAssessmentSettings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($null -eq $SQLServerVulnerabilityAssessmentSettings.NotificationEmail) {
                $effectedResources += $SQLServerVulnerabilityAssessmentSettings.ServerName
            }
        }
        $desc = "Configure 'Send scan reports to' with email ids of concerned data owners/stakeholders for a critical SQL servers."
        $rem = "Ensure that Vulnerability Assessment (VA) setting 'Send scan reports to' is configured for a SQL server"
        AddToExportArray -type "SQLServerVulnerabilityAssessmentSettings" -cisid "4.2.4" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL4_2_5 {
    try {
        $effectedResources = @()
        $SQLServerList = Get-AzSqlServer
        foreach ($name in $SQLServerList) {
            $SQLServerVulnerabilityAssessmentSettings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $name.ResourceGroupName -ServerName $name.Servername
            if ($SQLServerVulnerabilityAssessmentSettings.EmailAdmins -ne 'true') {
                $effectedResources += $SQLServerVulnerabilityAssessmentSettings.ServerName
            }
        }
        $desc = "Enable Vulnerability Assessment (VA) setting 'Also send email notifications to admins and subscription owners'."
        $rem = "Ensure that Vulnerability Assessment (VA) setting 'Also send email notifications to admins and subscription owners' is set for each SQL Server"
        AddToExportArray -type "SQLServerVulnerabilityAssessmentSettings" -cisid "4.2.5" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_3_1 {
    try {
        $effectedResources = @()
        $PostGreSQLServerInfo = Get-AzPostgreSqlServer
        foreach ($name in $PostGreSQLServerInfo) {
            if ($name.SslEnforcement -ne 'Enabled') {
                $effectedResources += $name.Name
            }
        }
        $desc = "Enable SSL connection on PostgreSQL Servers."
        $rem = "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server"
        AddToExportArray -type "PostGreSQLServerInfo" -cisid "4.3.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_3_2 {
    try {
        $effectedResources = @()
        $RG = Get-AzResourceGroup
        foreach ($names in $RG) {
            $PostgreSQLServerInfo = Get-AzPostgreSqlServer -ResourceGroupName $names.ResourceGroupName
            foreach ($name in $PostgreSQLServerInfo) {
                $PostgreSQLConfigurationInfo = Get-AzPostgreSqlConfiguration -Name log_checkpoints -ServerName $name.Name -ResourceGroupName $names.ResourceGroupName
                if ($PostgreSQLConfigurationInfo.Value -ne 'on' ) {
                    $effectedResources += $name.Name
                }
            }
        }
        $desc = "Enable log_checkpoints on PostgreSQL Servers."
        $rem = "Ensure Server Parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server"
        AddToExportArray -type "PostgreSQLConfigurationInfo" -cisid "4.3.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_3_3 {
    try {
        $effectedResources = @()
        $RG = Get-AzResourceGroup
        foreach ($names in $RG) {
            $PostgreSQLServerInfo = Get-AzPostgreSqlServer -ResourceGroupName $names.ResourceGroupName
            foreach ($name in $PostgreSQLServerInfo) {
                $PostgreSQLConfigurationInfo = Get-AzPostgreSqlConfiguration -Name log_connections -ServerName $name.Name -ResourceGroupName $names.ResourceGroupName
                if ($PostgreSQLConfigurationInfo.Value -ne 'on' ) {
                    $effectedResources += $name.Name
                }
            }
        }
        $desc = "Enable log_connections on PostgreSQL Servers."
        $rem = "Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server"
        AddToExportArray -type "PostgreSQLConfigurationInfo" -cisid "4.3.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_3_4 {
    try {
        $effectedResources = @()
        $RG = Get-AzResourceGroup
        foreach ($names in $RG) {
            $PostgreSQLServerInfo = Get-AzPostgreSqlServer -ResourceGroupName $names.ResourceGroupName
            foreach ($name in $PostgreSQLServerInfo) {
                $PostgreSQLConfigurationInfo = Get-AzPostgreSqlConfiguration -Name log_disconnections -ServerName $name.Name -ResourceGroupName $names.ResourceGroupName
                if ($PostgreSQLConfigurationInfo.Value -ne 'on' ) {
                    $effectedResources += $name.Name
                }
            }
        }
        $desc = "Enable log_disconnections on PostgreSQL Servers."
        $rem = "Ensure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server"
        AddToExportArray -type "PostgreSQLConfigurationInfo" -cisid "4.3.4" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_3_5 {
    try {
        $effectedResources = @()
        $RG = Get-AzResourceGroup
        foreach ($names in $RG) {
            $PostgreSQLServerInfo = Get-AzPostgreSqlServer -ResourceGroupName $names.ResourceGroupName
            foreach ($name in $PostgreSQLServerInfo) {
                $PostgreSQLConfigurationInfo = Get-AzPostgreSqlConfiguration -Name connection_throttling -ServerName $name.Name -ResourceGroupName $names.ResourceGroupName
                if ($PostgreSQLConfigurationInfo.Value -ne 'on' ) {
                    $effectedResources += $name.Name
                }
            }
        }
        $desc = "Enable connection_throttling on PostgreSQL Servers."
        $rem = "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server"
        AddToExportArray -type "PostgreSQLConfigurationInfo" -cisid "4.3.5" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_3_6 {
    try {
        $effectedResources = @()
        $RG = Get-AzResourceGroup
        foreach ($names in $RG) {
            $PostgreSQLServerInfo = Get-AzPostgreSqlServer -ResourceGroupName $names.ResourceGroupName
            foreach ($name in $PostgreSQLServerInfo) {
                $PostgreSQLConfigurationInfo = Get-AzPostgreSqlConfiguration -Name log_retention_days -ServerName $name.Name -ResourceGroupName $names.ResourceGroupName
                if ($PostgreSQLConfigurationInfo.Value -le 3 ) {
                    $effectedResources += $name.Name
                }
            }
        }
        $desc = "Enable log_retention_days on PostgreSQL Servers."
        $rem = "Ensure Server Parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server"
        AddToExportArray -type "PostgreSQLConfigurationInfo" -cisid "4.3.6" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_3_8 {
    try {
        $effectedResources = @()
        $PostgreSQLServerInfo = Get-AzPostgreSqlServer
        foreach ($name in $PostgreSQLServerInfo) {
            if ($name.InfrastructureEncryption -ne 'Enabled') {
                $effectedResources += $name.Name
            }
        }
        $desc = "Enable encryption at rest for PostgreSQL Databases."
        $rem = "Ensure 'Infrastructure double encryption' for PostgreSQL Database Server is 'Enabled'"
        AddToExportArray -type "PostgreSQLServerInfo" -cisid "4.3.8" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_4_1 {
    try {
        $effectedResources = @()
        $MySQLServerInformation = Get-AzMySqlServer
        foreach ($name in $MySQLServerInformation) {
            if ($name.SslEnforcement -ne 'Enabled') {
                $effectedResources += $name.Name
            }
        }
        $desc = "Enable SSL connection on MYSQL Servers."
        $rem = "Ensure 'Enforce SSL connection' is set to 'Enabled' for Standard MySQL Database Server"
        AddToExportArray -type "MySQLServerInformation" -cisid "4.4.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#========================================================================================================
function SQL_4_4_2 {
    try {
        $effectedResources = @()
        $RG = Get-AzResourceGroup
        foreach ($names in $RG) {
            $MySQLflexibleServerInfo = Get-AzMySqlFlexibleServer -ResourceGroupName $names.ResourceGroupName
            foreach ($name in $MySQLflexibleServerInfo) {
                $SQLConfig = Get-AzMySqlFlexibleServerConfiguration -Name tls_version -ServerName $name.Name -ResourceGroupName $names.ResourceGroupName
                if ($SQLConfig.Value -ne 'TLSV1.2' ) {
                    $effectedResources += $name.Name
                }
            }
        }
        $desc = "Ensure TLS version on MySQL flexible servers is set to the default value."
        $rem = "Ensure 'TLS Version' is set to 'TLSV1.2' for MySQL flexible Database Server"
        AddToExportArray -type "MySQLflexibleServerInfo" -cisid "4.4.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}
#==========================================================================================================
function Log5.1.2 {
    try {
        $effectedResources = @()
        $name = Get-AzSubscription
        foreach ($Names in $name){
            $id = $names.Id
            $ResourceId = 'subscriptions/'+$id
            $DiagnosticSettings = Get-AzDiagnosticSetting -ResourceId $ResourceId
            for($i=0;$i-lt $DiagnosticSettings.Logs.count;$i++){
                $pub = $DiagnosticSettings.Logs[$i]
                if ($pub.Enabled -eq $false){
                    $effectedResources += ($DiagnosticSettings.Logs )
                }
            }
        }
        
        $desc = "The diagnostic setting should be configured to log the appropriate activities from the control/management plane."
        $rem = "Ensure Diagnostic Setting captures appropriate categories"
        AddToExportArray -type "DiagnosticsSettings5.1.2" -cisid "5.1.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#===========================================================================================

function Log5.1.3{
    try {
        $effectedResources = @()
        $sa=Get-AzStorageAccount
        foreach($name in $sa ){
            $m = Write-Output $name.ResourceGroupName
            $n = Write-Output $name.StorageAccountName
            $key1 = (Get-AzStorageAccountKey -ResourceGroupName $m -Name $n).value
            $storagecontext = New-azstoragecontext -storageaccountname $n -StorageAccountKey $key1.getvalue(0)
            $az =Get-AzStorageContainer -context $storagecontext
            $output = $false
            for($i=0;$i-lt $az.count;$i++){
                $pub = $az[$i].PublicAccess
                if ($pub -ne "Off"){
                    $effectedResources += $az[$i].Name
                }

            }
        }       
        $desc = "The storage account container containing the activity log export should not be publicly accessible"
        $rem = "Ensure the Storage Container Storing the Activity Logs is not Publicly Accessible (Automated)"
        AddToExportArray -type "storage account container5.1.3" -cisid "5.1.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    } 
}

#=========================================================================================

function Log5.1.4 {
    try {
        $effectedResources = @()
    $sa=Get-AzStorageAccount
    foreach($name in $sa){
        $m = Write-Output $name.ResourceGroupName
        $n = Write-Output $name.StorageAccountName
        $k= $name.Encryption
        if ($k.KeySource -ne "Microsoft.Keyvault" -and $k.KeyVaultProperties -eq $null){
            $effectedResources += ($n +" : "+$m)
        }
    }       
        $desc = "Storage accounts with the activity log exports can be configured to use Customer Managed Keys (CMK)."
        $rem = "Ensure the storage account containing the container with activity logs is encrypted with Customer Managed Key "
        AddToExportArray -type "storage account container5.1.4" -cisid "5.1.4" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#========================================================================================


function Log5.1.5 {
    try {
        $effectedResources = @()
    $name = Get-AzSubscription
    $data =$false
    foreach ($Names in $name){
        $id = $names.Id
        $ResourceId =  'subscriptions/'+$id
        $DiagnosticSettings = (get-AzDiagnosticSetting -ResourceId $ResourceId)
        $logs= $DiagnosticSettings.Logs
        foreach($namelog in $logs){
            if(($namelog.Category -ne "AuditEvent") -and ($namelog.RetentionPolicy -ne "180")){
            $data = $true
            }
        }
if($data -eq $true){
$effectedResources += $ResourceId
}
}    
        $desc = "Enable AuditEvent logging for key vault instances to ensure interactions with key vaults are logged and available."
        $rem = "Ensure that logging for Azure Key Vault is 'Enabled'"
        AddToExportArray -type "storage account container5.1.5" -cisid "5.1.5" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}




#==============================================================================

function Networking6.1 {
    try {
        $effectedResources = @()
        $secgroups = Get-AzNetworkSecurityGroup
        Foreach ($names in $secgroups){
        $RdpEnabled=($names.SecurityRules| Where-Object {$_.Name -eq 'RDP'-and $_.Access -eq 'Allow' -and ($_.DestinationPortRange -eq '3389' -or $_.DestinationPortRange -eq '*')})
        if($RdpEnabled){
            $effectedResources += ($names.Name )
}
}

        
        $desc = "Network security groups should be periodically evaluated for port misconfigurations. Where certain ports and protocols may be exposed to the Internet, they should be evaluated for necessity and restricted wherever they are not explicitly required."
        $rem = "Ensure that RDP access from the Internet is evaluated and restricted"
        AddToExportArray -type "Networking6.1" -cisid "6.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}


#==========================================================================================================================

function Networking6.2 {
    try {
        $effectedResources = @()
        $secgroups = Get-AzNetworkSecurityGroup
        Foreach ($names in $secgroups){
        $RdpEnabled=($names.SecurityRules| Where-Object {$_.Name -eq 'SSH' -and ($_.Protocol -eq 'Tcp' -or $_.Protocol -eq 'TCP') -and ($_.DestinationPortRange -eq '22' -or $_.DestinationPortRange -eq '*') -and $_.Access -eq 'Allow'})
        if($RdpEnabled){
        $effectedResources += $names.Name
}
}
        
        $desc = "Network security groups should be periodically evaluated for port misconfigurations. Where certain ports and protocols may be exposed to the Internet, they should be evaluated for necessity and restricted wherever they are not explicitly required."
        $rem = "Ensure that RDP access from the Internet is evaluated and restricted"
        AddToExportArray -type "Networking6.2" -cisid "6.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#=======================================================================================================

function Networking6.3 {
    try {
        $effectedResources = @()
        $secgroups = Get-AzNetworkSecurityGroup
        Foreach ($names in $secgroups){
        $RdpEnabled=($names.SecurityRules| Where-Object {$_.Name -eq 'UDP' -and ($_.Protocol -eq 'UDP' -or $_.Protocol -eq 'Udp') -and $_.Access -eq 'Allow'})
        if($RdpEnabled){
        $effectedResources += ($names.Name)
}
}
        
        $desc = "Network security groups should be periodically evaluated for port misconfigurations. Where certain ports and protocols may be exposed to the Internet, they should be evaluated for necessity and restricted wherever they are not explicitly required."
        $rem = "Ensure that UDP access from the Internet is evaluated and restricted"
        AddToExportArray -type "Networking6.3" -cisid "6.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}


#========================================================================================================

function Networking6.4 {
    try {
        $effectedResources = @()
        $secgroups = Get-AzNetworkSecurityGroup
        Foreach ($names in $secgroups){
        $RdpEnabled=($names.SecurityRules| Where-Object {$_.Name -eq 'HTTP' -and ($_.Protocol -eq 'TCP' -or $_.Protocol -eq 'Tcp') -and $_.Access -eq 'Allow'})
        if($RdpEnabled){
        $effectedResources += $names.Name
        }
}
        
        $desc = "Network security groups should be periodically evaluated for port misconfigurations."
        $rem = "Ensure that HTTP(S) access from the Internet is evaluated and restricted."
        AddToExportArray -type "Networking6.4" -cisid "6.4" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}
#=======================================================================================================

function Virtualmachine_7.2 {
    try {
        $effectedResources_72 = @()
        $disks = Get-AzDisk
        foreach ($disk in $disks) {
            foreach ($encryptionSettings in $disk) {
               if($encryptionSettings.Encryption.Type -ne "EncryptionAtRestWithCustomerKey"){
                    $effectedResources_72 += $encryptionSettings.Name
               }
                }
        }
        $desc = "Ensure that OS disks (boot volumes) and data disks (non-boot volumes) are encrypted with CMK (Customer Managed Keys). Customer Managed keys can be either ADE or Server Side Encryption (SSE)."
        $rem = "Ensure that 'OS and Data' disks are encrypted with Customer Managed Key (CMK)"
        AddToExportArray -type "DiskEncryption" -cisid "7.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources_72) -remidiation $rem -effectedResource $effectedResources_72
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}

#====================================================================================================================

function Virtualmachine_7.3{
    try {
        $effectedResources_73 = @()
        $disks = Get-AzDisk
        foreach ($disk in $disks) {
            foreach ($encryptionSettings in $disk) {
               if ($encryptionSettings.DiskState -eq "Unattached" -and $encryptionSettings.Encryption.Type -ne "EncryptionAtRestWithCustomerKey"){
               $effectedResources_73 += $encryptionSettings.Name
                }
    
        }
    }
         
        $desc = "Ensure that unattached disks in a subscription are encrypted with a Customer Managed Key (CMK)."
        $rem = "Ensure that 'Unattached disks' are encrypted with 'Customer Managed Key' (CMK) "
        AddToExportArray -type "DiskEncryption" -cisid "7.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources_73) -remidiation $rem -effectedResource $effectedResources_73   
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    }
#==============================================================================================================
function KeyVaults8.1{
    try {
        $effectedResources = @()
         $Vault = Get-AzKeyVault
Foreach ($Name in $Vault){
    $VaultDetails = Get-AzKeyVault -VaultName $Name.VaultName
    if($VaultDetails.EnableRbacAuthorization -eq $true){
        $keydetails = Get-AzKeyVaultKey -VaultName $Name.VaultName
        if($keydetails.Expires){
                $effectedResources += $keydetails.Expires
                }
            } 
           }
         
       
        $desc = "Ensure that all Keys in Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set."
        $rem = "Ensure that the Expiration Date is set for all Keys in RBAC Key Vaults"
        AddToExportArray -type "KeyVaults8.1" -cisid "8.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    }
    
#=======================================================================================================

function KeyVaults8.2 {
    try {
        $effectedResources = @()
 Foreach ($Name in $Vault){
    $VaultDetails = Get-AzKeyVault -VaultName $Name.VaultName
    if($VaultDetails.EnableRbacAuthorization -eq $false){
        $keydetails = Get-AzKeyVaultKey -VaultName $Name.VaultName
        if($keydetails.Expires){
          } else{
            $effectedResources += $keydetails.VaultName
          }
      } 
      }
        $desc = "Ensure that all Keys in Non Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set."
        $rem = "Ensure that the Expiration Date is set for all Keys in NonRBAC Key Vaults."
        AddToExportArray -type "KeyVaults8.2" -cisid "8.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    }
    
#=======================================================================================================

function KeyVaults8.3 {
    try {
        $effectedResources = @()
$Vault = Get-AzKeyVault
Foreach ($Name in $Vault){
    $VaultDetails = Get-AzKeyVault -VaultName $Name.VaultName
    if($VaultDetails.EnableRbacAuthorization -eq $true){
        $keydetails = Get-AzKeyVaultSecret -VaultName $Name.VaultName
        if($keydetails.Expires){
            $effectedResources += $keydetails.Expires
          }
      } 
   } 
       
        $desc = "Ensure that all Secrets in Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set."
        $rem = "Ensure that the Expiration Date is set for all Secrets in RBAC Key Vaults "
        AddToExportArray -type "KeyVaults8.3" -cisid "8.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
 }

#=======================================================================================================

function KeyVaults8.4 {
    try {
        $effectedResources = @()
$Vault = Get-AzKeyVault
Foreach ($Name in $Vault){
    $VaultDetails = Get-AzKeyVault -VaultName $Name.VaultName
    if($VaultDetails.EnableRbacAuthorization -eq $false){
        $keydetails = Get-AzKeyVaultSecret -VaultName $Name.VaultName
        if($keydetails.Expires -ne "Enabled" -or $keydetails.Expires -eq $false){
            $effectedResources += ($keydetails.VaultName+":"+$keydetails.Expires)
          }
      } 
   }
        $desc = "Ensure that all Secrets in Non Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set."
        $rem = "Ensure that the Expiration Date is set for all Secrets in Non-RBAC Key Vaults"
        AddToExportArray -type "KeyVaults8.4" -cisid "8.4" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    }

#========================================================================================================

function KeyVaults8.5 {
    try {
        $effectedResources = @()
$Vault = Get-AzKeyVault
Foreach ($Name in $Vault){
   Foreach ($Names in $Name){
   $vaultname = $Names.VaultName
   $vaultDetails = Get-AzKeyVault -VaultName $Vaultname
   if($vaultDetails.EnableSoftDelete -and $vaultDetails.EnablePurgeProtection){
   }else{
   $effectedResources += ($vaultDetails.VaultName)
   }
   }
 }    
        $desc = "It is recommended the Key Vault be made recoverable by enabling the Do Not Purge and Soft Delete functions."
        $rem = "Ensure the Key Vault is Recoverable"
        AddToExportArray -type "KeyVaults8.5" -cisid "8.5" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    }

#========================================================================================================
function Appservice9.1{
    try {
        $effectedResources = @()
       
    $sa=Get-AzWebApp

    foreach($name in $sa){
    $m = Write-Output $name.ResourceGroup 
    $n = Write-Output $name.name
    $az = Invoke-AzResourceAction -ResourceGroupName $m -ResourceType "Microsoft.Web/sites/config" -ResourceName "$n/authsettings" -Action list } 
    if($az.properties.enabled -eq $false){
        $effectedResources += ($n)
    }
      $desc  = "Azure App Service Authentication is a feature that can prevent anonymous HTTP requests from reaching the API app, or authenticate those that have tokens before they reach the API app. If an anonymous request is received from a browser, App Service will redirect to a logon page. To handle the logon process, a choice from a set of identity providers can be made, or a custom authentication mechanism can be implemented."
        $rem = " Ensure App Service Authentication is set up for apps in Azure App Service"
        AddToExportArray -type "AppService9" -cisid "9.1" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#========================================================================================================


function Appservice9.2{
    try {
        $effectedResources = @()
       
        $sa=Get-AzWebApp

        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroup 
        $n = Write-Output $name.name
        $az= Get-AzWebApp -ResourceGroupName $m -Name $n 
        } 
        if($az.HttpsOnly -eq $false){
            $effectedResources += ($n)
        }
        
    $desc = "Azure Web Apps allows sites to run under both HTTP and HTTPS by default. Web apps can be accessed by anyone using non-secure HTTP links by default. Non-secure HTTP  requests can be restricted and all HTTP requests redirected to the secure HTTPS port.  It is recommended to enforce HTTPS-only traffic. "
        $rem = "Ensure Web App Redirects All HTTP traffic to HTTPS in Azure App Service"
        AddToExportArray -type "AppService9" -cisid "9.2" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}


#========================================================================================================



function Appservice9.3{
    try {
        $effectedResources = @()
       
        $sa=Get-AzWebApp

        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroup 
        $n = Write-Output $name.name
        $az= Get-AzWebApp -ResourceGroupName $m -Name $n 
        } 
        if($az.SiteConfig.MinTlsVersion -ne '1.2'){
            $effectedResources += ($n)
        }
        
        $desc ="The TLS (Transport Layer Security) protocol secures transmission of data over the internet using standard encryption technology. Encryption should be set with the latest version of TLS. App service allows TLS 1.2 by default, which is the recommended TLS  level by industry standards such as PCI DSS. "
       $rem     = " Ensure Web App is using the latest version of TLS encryption "
        AddToExportArray -type "AppService9" -cisid "9.3" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}
#========================================================================================================


function Appservice9.4{
    try {
        $effectedResources = @()
       
        $sa=Get-AzWebApp

        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroup 
        $n = Write-Output $name.name
        $az= Get-AzWebApp -ResourceGroupName $m -Name $n 
        } 
        if($az.ClientCertEnabled -eq $false){
            $effectedResources += ($n)
        }
        
        $desc   = "Client certificates allow for the app to request a certificate for incoming requests. Only  clients that have a valid certificate will be able to reach the app. "
        $rem    =  " Ensure the web app has 'Client Certificates (Incoming client  certificates)' set to 'On' "
        AddToExportArray -type "AppService9" -cisid "9.4" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}
#========================================================================================================



function Appservice9.5{
    try {
        $effectedResources = @()
       
        $sa=Get-AzWebApp

        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroup 
        $n = Write-Output $name.name
        $az= Get-AzWebApp -ResourceGroupName $m -Name $n 
        } 
        if($az.Identity -ne $true ){
            $effectedResources += ($n)
        }
        $desc = "Managed service identity in App Service provides more security by eliminating secrets from the app, such as credentials in the connection strings. When registering with Azure Active Directory in App Service, the app will connect to other Azure services securely  without the need for usernames and passwords."
        $rem = "Ensure that Register with Azure Active Directory is enabled on App Service"
        AddToExportArray -type "AppService9" -cisid "9.5" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}



#========================================================================================================



function Appservice9.9{
    try {
        $effectedResources = @()
       
        $sa=Get-AzWebApp

        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroup 
        $n = Write-Output $name.name
        $az= Get-AzWebApp -ResourceGroupName $m -Name $n 
        } 
        if($az.SiteConfig.Http20Enabled  -eq $false){
            $effectedResources += ($n)
        }
        $desc = "Periodically, newer versions are released for HTTP either due to security flaws or to  include additional functionality. Using the latest HTTP version for web apps to take  advantage of security fixes, if any, and/or new functionalities of the newer version. "
        $rem = "Ensure that 'HTTP Version' is the Latest, if Used to Run the Web App"
        AddToExportArray -type "AppService9" -cisid "9.9" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}

#========================================================================================================


function Appservice9.10{
    try {
        $effectedResources = @()
       
        $sa=Get-AzWebApp

        foreach($name in $sa){
        $m = Write-Output $name.ResourceGroup 
        $n = Write-Output $name.name
        $az= Get-AzWebApp -ResourceGroupName $m -Name $n 
        } 
        if($az.SiteConfig.FtpsState  -eq "Allallowed"){
            $effectedResources += ($n)
        }
        $desc = "By default, Azure Functions, Web, and API Services can be deployed over FTP. If FTP is required for an essential deployment workflow, FTPS should be required for FTP login for all App Service Apps and Functions."
        $rem =  "Ensure FTP deployments are Disabled"
        AddToExportArray -type "AppService9" -cisid "9.9" -description $desc -subSeverity "Medium" -status (StatusCheck -inputArray $effectedResources) -remidiation $rem -effectedResource $effectedResources
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
    
}





#========================================================================================================

function StatusCheck {
    param (
        $inputArray    
    )
    try {
        if ($inputArray.count -eq 0) { return 'Pass' } else { return 'Failed' }
    }
    catch {
        Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
        Write-Host $_
    }
}

function AddToExportArray {
    param (
        $type,
        $cisid,
        $description,
        $subSeverity,
        $status,
        $remidiation,
        $effectedResource
    )
    $global:exportArray.Add([PSCustomObject]@{
            "Type"                  = $type
            "CISID"                 = $cisid
            "Description"           = $description
            "SubSeverity"           = $subSeverity
            "Status"                = $status
            "remidiation"           = $remidiation
            "effectedResources" = $effectedResource
        })
}


####################################### Main ###############################################

try {
#IAM(Identity and Access Management)
    #IAM1.23

#Storage
    #Storage3.1 
    #Storage3.5 
    #Storage3.7
    #Storage3.8 
    #Storage3.9
    #Storage3.11
    #Storage3.13
    #Storage3.14
    #Storage3.15

#DataBaseService
    #SQL4_1_1
    #SQL4_1_2
    #SQL4_1_3
    #SQL4_1_4
    #SQL4_1_5
    #SQL4_1_6
    #SQL4_2_1
    #SQL4_2_2
    #SQL4_2_3
    #SQL4_2_4
    #SQL4_2_5
    #SQL_4_3_1
    #SQL_4_3_2
    #SQL_4_3_3
    #SQL_4_3_4
    #SQL_4_3_5
    #SQL_4_3_6
    #SQL_4_3_8
    #SQL_4_4_1
    #SQL_4_4_2

#LOGS
    #Log5.1.2 
    #Log5.1.3
    #Log5.1.4
    #Log5.1.5

#Networking
    #Networking6.1
    #Networking6.2
    #Networking6.3
    #Networking6.4

#VirtualMachine
    #Virtualmachine_7.2
    #Virtualmachine_7.3
    
#8 KeyVaults
    #KeyVaults8.1
    #KeyVaults8.2
    #KeyVaults8.3
    #KeyVaults8.4
    #KeyVaults8.5

#Appservice
    #Appservice9.1
    #Appservice9.2
    #Appservice9.3
    #Appservice9.4
    #Appservice9.5
    #Appservice9.9
    #Appservice9.10


    $global:exportArray
}
catch {
    Write-Host (Get-Date -UFormat '%y_%m_%d') '- The following error occured: '
    Write-Host $_
}

